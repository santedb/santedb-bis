<?xml version="1.0" encoding="utf-8" ?>
<BiDataFlowDefinition xmlns="http://santedb.org/bi" id="org.santedb.bi.datamart.core.obs">
  <parameters>
    <ref name="input" />
    <ref name="output" />
  </parameters>
  <pipeline>
    <log name="log_start" priority="Verbose">Start Observations {{input}}</log>
    <reader name="source_qty">
      <connection ref="input" />
      <sql>
        <add>
          <providers>
            <invariant>npgsql</invariant>
            <invariant>FirebirdSQL</invariant>
            <invariant>sqlite</invariant>
          </providers>
          <![CDATA[ 
            SELECT DISTINCT 
	            INTR.MNEMONIC AS INTERPRETATION,
	            QTY AS VALUE_QTY,
	            UOM.MNEMONIC AS UNIT_OF_MEASURE,
	            ACT_VRSN_TBL.ACT_ID
            FROM 
	            QTY_OBS_TBL
	            INNER JOIN OBS_TBL USING (ACT_VRSN_ID)
	            INNER JOIN ACT_VRSN_TBL USING (ACT_VRSN_ID)
	            INNER JOIN CD_VRSN_TBL UOM ON (UOM_CD_ID = UOM.CD_ID AND UOM.OBSLT_UTC IS NULL)
	            LEFT JOIN CD_VRSN_TBL INTR ON (INT_CD_ID = INTR.CD_ID AND INTR.OBSLT_UTC IS NULL)
            WHERE 
	            ACT_VRSN_TBL.OBSLT_UTC IS NULL
          ]]>
        </add>
      </sql>
    </reader>
    <writer truncate="true" mode="insert" name="write_qty">
      <input ref="source_qty" />
      <connection ref="output" />
      <target ref="OBS_TBL" />
    </writer>
    <reader name="source_cd">
      <connection ref="input" />
      <sql>
        <add>
          <providers>
            <invariant>npgsql</invariant>
            <invariant>sqlite</invariant>
            <invariant>FirebirdSQL</invariant>
          </providers>
          <![CDATA[
            SELECT DISTINCT 
	            INTR.MNEMONIC AS INTERPRETATION,
	            VAL.MNEMONIC AS VALUE_STRING,
	            ACT_VRSN_TBL.ACT_ID
            FROM 
	            CD_OBS_TBL
	            INNER JOIN OBS_TBL USING (ACT_VRSN_ID)
	            INNER JOIN ACT_VRSN_TBL USING (ACT_VRSN_ID)
	            INNER JOIN CD_VRSN_TBL VAL ON (VAL_CD_ID = VAL.CD_ID AND VAL.OBSLT_UTC IS NULL)
	            LEFT JOIN CD_VRSN_TBL INTR ON (INT_CD_ID = INTR.CD_ID AND INTR.OBSLT_UTC IS NULL)
            WHERE 
	            ACT_VRSN_TBL.OBSLT_UTC IS NULL
        ]]>
        </add>
      </sql>
    </reader>
    <writer truncate="false" mode="insert" name="write_cd">
      <input ref="source_cd" />
      <connection ref="output" />
      <target ref="OBS_TBL" />
    </writer>
    <reader name="source_txt">
      <connection ref="input" />
      <sql>
        <add>
          <providers>
            <invariant>npgsql</invariant>
            <invariant>sqlite</invariant>
            <invariant>FirebirdSQL</invariant>
          </providers>
          <![CDATA[
            SELECT DISTINCT 
	            INTR.MNEMONIC AS INTERPRETATION,
	            TXT_OBS_TBL.OBS_VAL AS VALUE_STRING,
	            ACT_VRSN_TBL.ACT_ID
            FROM 
	            TXT_OBS_TBL
	            INNER JOIN OBS_TBL USING (ACT_VRSN_ID)
	            INNER JOIN ACT_VRSN_TBL USING (ACT_VRSN_ID)
	            LEFT JOIN CD_VRSN_TBL INTR ON (INT_CD_ID = INTR.CD_ID AND INTR.OBSLT_UTC IS NULL)
            WHERE 
	            ACT_VRSN_TBL.OBSLT_UTC IS NULL
          ]]>
        </add>
      </sql>
    </reader>
    <writer truncate="false" mode="insert" name="write_txt">
      <input ref="source_txt" />
      <connection ref="output" />
      <target ref="OBS_TBL" />
    </writer>
    <union name="union_write">
      <input ref="write_qty" />
      <with ref="write_cd" />
      <with ref="write_txt" />
    </union>
    <filter name="filter_rejects">
      <input ref="union_write" />
      <all>
        <when field="$reject" op="eq">
          <bool>true</bool>
        </when>
      </all>
    </filter>
    <transform name="transform_rejects">
      <input ref="filter_rejects" />
      <map>
        <source name="ACT_ID" />
        <target name="RECORD_ID" />
      </map>
      <map>
        <source>
          <fixed>OBS_TBL</fixed>
        </source>
        <target name="RECORD_TYP" />
      </map>
      <map>
        <source name="$reject.reason" />
        <target name="REASON" />
      </map>
    </transform>
    <writer mode="insertUpdate" truncate="false" name="write_rejects">
      <input ref="transform_rejects" />
      <connection ref="output" />
      <target ref="REJECT_TBL" />
    </writer>
    <filter name="filter_rejects2">
      <input ref="write_rejects" />
      <all>
        <when field="$reject" op="eq">
          <bool>true</bool>
        </when>
      </all>
    </filter>
    <halt name="halt_rejects">
      <input ref="filter_rejects2" />
    </halt>
  </pipeline>
</BiDataFlowDefinition>