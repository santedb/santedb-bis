<?xml version="1.0" encoding="utf-8" ?>
<!--
 - Copyright 2021-2024 SanteSuite Contributors (See NOTICE.md for full copyright notices)
 - Copyright (C) 2019 - 2021, Fyfe Software Inc. and the SanteSuite Contributors
 - Portions Copyright (C) 2015-2018 Mohawk College of Applied Arts and Technology
 - 
 - Licensed under the Apache License, Version 2.0 (the "License"); you 
 - may not use this file except in compliance with the License. You may 
 - obtain a copy of the License at 
 - 
 - http://www.apache.org/licenses/LICENSE-2.0 
 - 
 - Unless required by applicable law or agreed to in writing, software
 - distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 - WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the 
 - License for the specific language governing permissions and limitations under 
 - the License.
 - 
 - User: fyfej
 - Date: 2023-6-21
 -->
<BiDataFlowDefinition xmlns="http://santedb.org/bi" id="org.santedb.bi.datamart.core.encs">
  <parameters>
    <ref name="input" />
    <ref name="output" />
  </parameters>
  <pipeline>
    <log name="log_start" priority="Verbose">Start Encounters {{input}}</log>
    <reader name="source_enc">
      <connection ref="input" />
      <sql>
        <add>
          <providers>
            <invariant>npgsql</invariant>
            <invariant>FirebirdSQL</invariant>
            <invariant>sqlite</invariant>
          </providers>
          <![CDATA[ 
            SELECT 
	            DISP.MNEMONIC AS DISCHARGE_DISP,
	            ADM_SRC.MNEMONIC AS ADMISSION_SRC,
	            ACT_ID
            FROM 
	            PAT_ENC_TBL 
	            INNER JOIN ACT_VRSN_TBL USING (ACT_VRSN_ID)
	            LEFT JOIN CD_VRSN_TBL DISP ON (DISP.CD_ID = PAT_ENC_TBL.DSCH_DSP_CD_ID AND DISP.OBSLT_UTC IS NULL)
	            LEFT JOIN CD_VRSN_TBL ADM_SRC ON (ADM_SRC.CD_ID = PAT_ENC_TBL.ADM_SRC_CD_ID AND ADM_SRC.OBSLT_UTC IS NULL)
            WHERE 
	            ACT_VRSN_TBL.OBSLT_UTC IS NULL
            ]]>
        </add>
      </sql>
    </reader>
    <writer truncate="true" mode="insert" name="write_enc">
      <input ref="source_enc" />
      <connection ref="output" />
      <target ref="PAT_ENC_TBL" />
    </writer>
    <reader name="source_arg">
      <connection ref="input" />
      <sql>
        <add>
          <providers>
            <invariant>npgsql</invariant>
            <invariant>FirebirdSQL</invariant>
            <invariant>sqlite</invariant>
          </providers>
          <![CDATA[
          SELECT 
	          PAT_ENC_ARG_TBL.ARG_ID ,
	          PAT_ENC_ARG_TBL.ACT_ID ,
	          PAT_ENC_ARG_TBL.START_UTC AS START,
	          PAT_ENC_ARG_TBL.STOP_UTC AS STOP,
	          TYP.MNEMONIC AS TYPE
          FROM 
	          PAT_ENC_ARG_TBL
	          INNER JOIN CD_VRSN_TBL TYP ON (TYP.CD_ID = PAT_ENC_ARG_TBL.TYP_CD_ID AND TYP.OBSLT_UTC IS NULL)
          WHERE 
	          OBSLT_VRSN_SEQ_ID IS NULL
          ]]>
        </add>
      </sql>
    </reader>
    <writer name="write_arg">
      <input ref="source_arg" />
      <connection ref="output" />
      <target ref="PAT_ENC_ARG_TBL" />
    </writer>
    <union name="union_write">
      <input ref="write_enc" />
      <with ref="write_arg" />
    </union>
    <filter name="filter_rejects">
      <input ref="union_write" />
      <all>
        <when field="$reject" op="eq">
          <bool>true</bool>
        </when>
      </all>
    </filter>
    <transform name="transform_rejects">
      <input ref="filter_rejects" />
      <map>
        <source name="ACT_ID" />
        <target name="RECORD_ID" />
      </map>
      <map>
        <source>
          <fixed>PAT_ENC_TBL</fixed>
        </source>
        <target name="RECORD_TYP" />
      </map>
      <map>
        <source name="$reject.reason" />
        <target name="REASON" />
      </map>
    </transform>
    <writer mode="insertUpdate" truncate="false" name="write_rejects">
      <input ref="transform_rejects" />
      <connection ref="output" />
      <target ref="REJECT_TBL" />
    </writer>
    <filter name="filter_rejects2">
      <input ref="write_rejects" />
      <all>
        <when field="$reject" op="eq">
          <bool>true</bool>
        </when>
      </all>
    </filter>
    <halt name="halt_rejects">
      <input ref="filter_rejects2" />
    </halt>
  </pipeline>
</BiDataFlowDefinition>